{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileEventCard.tsx","features/profiles/ProfileEventsTab.tsx","features/profiles/ProfileEvents.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listProfileActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","_","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","ProfileEventCard","wrapped","ui","Meta","ProfileEventsTab","setLoading","setActivities","inline","display","flexDirection","flexWrap","justifyContent","itemsPerRow","predicates","ProfileEvents","menu","panes","menuItem","toUpperCase","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9ff238ad.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber=1, pageSize=2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, ProfileEvent } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV === 'development'){\n        await sleep(1000);\n    }\n    \n    const pagination = response.headers['pagination'];\n\n    if(pagination){\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n                                            .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listProfileActivities: (username: string, predicate: string) => \n        requests.get<ProfileEvent[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    bio?: string;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface ProfileEvent {\n    id: string;\n    category: string;\n    title: string;\n    date: string;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { format } from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (params: PagingParams) => {\n        this.pagingParams = params;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((_, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            });\n        }\n\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\n        \n        this.predicate.forEach((value, key) => {\n            if(key === 'startDate'){\n                params.append('startDate', (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        });\n\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {   \n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    } \n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n    \n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} exact to='/' header>\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                                text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer( function ActivityFilters() {\n\n    const {activityStore: {predicate,setPredicate}} = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activites'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 2\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendee.image || '/assets/user.png'} \n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, pagination, setPagingParams } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {\n                    (activityStore.loadingInitial && !loadingNext) ? (\n                        <>\n                            <ActivityListItemPlaceholder />\n                            <ActivityListItemPlaceholder />\n                        </>\n                    ) : (\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={handleGetNext}\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                            initialLoad={false}\n                        >\n                            <ActivityList />\n                        </InfiniteScroll>\n                    )\n                }\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width='10'>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid >\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n\n                ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                Login!\n                        </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                Register!\n                        </Button>\n                        </>\n\n                    )}\n            </Container>\n        </Segment>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\n                        <MyDateInput \n                            placeholderText='Date'  \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City'  name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance} color='teal'>\n                            Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n                \n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button \n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})\n","import React, {useState} from 'react';\nimport {useStore} from \"../../app/stores/store\";\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})\n","import React from 'react';\r\nimport { ProfileEvent } from '../../app/models/profile';\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    activity: ProfileEvent;\r\n}\r\n\r\nconst ProfileEventCard = ({activity}: Props ) => (\r\n  <Card as={Link} to={`/activities/${activity.id}`}>\r\n    <Image src={`/assets/categoryImages/${activity.category}.jpg`} wrapped ui={false} />\r\n    <Card.Content>\r\n      <Card.Header>{activity.title}</Card.Header>\r\n      <Card.Meta>\r\n        <span className='date'>{activity.date}</span>\r\n      </Card.Meta>\r\n    </Card.Content>\r\n  </Card>\r\n)\r\n\r\nexport default ProfileEventCard;","import React, { useEffect, useState } from 'react';\r\nimport { Card, Loader, Tab } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport { ProfileEvent } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEventCard from './ProfileEventCard';\r\n\r\ninterface Props {\r\n    predicate: string;\r\n    username: string;\r\n}\r\n\r\nconst ProfileEventsTab = ({predicate, username}: Props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [activities, setActivities] = useState<ProfileEvent[]>([]);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        agent.Profiles\r\n            .listProfileActivities(username, predicate)\r\n            .then((activities) => setActivities(activities))\r\n            .then(() => setLoading(false));\r\n    },[username, predicate]);\r\n\r\n    if(loading){\r\n        return <Loader active={loading} inline='centered' />\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane \r\n            attached={false} \r\n            style={{ \r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'space-around'\r\n            }}\r\n        >\r\n            <Card.Group itemsPerRow={4}>\r\n            {\r\n                activities.map(activity => (\r\n                    <ProfileEventCard key={activity.id} activity={activity}/>\r\n                ))\r\n            }\r\n            </Card.Group>\r\n        </Tab.Pane>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileEventsTab;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileEventsTab from './ProfileEventsTab';\r\n\r\nconst predicates = ['isHosting', 'future', 'past'];\r\n\r\nconst ProfileEvents = () => {\r\n\r\n    const { username } = useParams<{ username: string }>();\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        panes={\r\n                            predicates.map(predicate => ({\r\n                                menuItem: predicate.toUpperCase(),\r\n                                render: () => <ProfileEventsTab predicate={predicate} username={username} />\r\n                            }))\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default ProfileEvents;","import React from 'react';\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\nimport ProfileCard from \"./ProfileCard\";\nimport {useStore} from \"../../app/stores/store\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\n                    />\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})\n","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n            <input {...getInputProps()} />  \n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid widths={2}>\n                                                <Button \n                                                    basic\n                                                    color='green'\n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading={target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button \n                                                    basic \n                                                    color='red' \n                                                    icon='trash' \n                                                    loading={target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileEvents from './ProfileEvents';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileEvents />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}